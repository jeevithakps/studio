// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Predicts the likely location of a misplaced item based on item
 *   characteristics, time of day, user habits, and other relevant factors.
 *
 * - predictLocation - A function that handles the location prediction process.
 * - PredictLocationInput - The input type for the predictLocation function.
 * - PredictLocationOutput - The return type for the predictLocation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictLocationInputSchema = z.object({
  itemCharacteristics: z
    .string()
    .describe('Characteristics of the item, such as size and color.'),
  timeOfDay: z.string().describe('The current time of day.'),
  userHabits: z.string().describe('The user\'s habits related to item usage.'),
  additionalContext: z
    .string()
    .optional()
    .describe('Any additional context that might be relevant.'),
});
export type PredictLocationInput = z.infer<typeof PredictLocationInputSchema>;

const PredictLocationOutputSchema = z.object({
  predictedLocation: z
    .string()
    .describe('The predicted location of the misplaced item.'),
  confidenceLevel: z
    .number()
    .describe('A number representing the confidence level (0-1) of the prediction.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the predicted location.'),
});
export type PredictLocationOutput = z.infer<typeof PredictLocationOutputSchema>;

export async function predictLocation(
  input: PredictLocationInput
): Promise<PredictLocationOutput> {
  return predictLocationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictLocationPrompt',
  input: {schema: PredictLocationInputSchema},
  output: {schema: PredictLocationOutputSchema},
  prompt: `You are an AI assistant that predicts the location of misplaced items in a household.

  Based on the following information, predict the most likely location of the item:

  Item Characteristics: {{{itemCharacteristics}}}
  Time of Day: {{{timeOfDay}}}
  User Habits: {{{userHabits}}}
  Additional Context: {{{additionalContext}}}

  Consider factors such as the item's characteristics, the time of day, the user's habits, and any additional context provided.

  Provide the predicted location, a confidence level (0-1), and the reasoning behind your prediction.
  Format your response as JSON according to the PredictLocationOutputSchema schema description.`, // Ensure this is properly formatted for JSON output and schema description
});

const predictLocationFlow = ai.defineFlow(
  {
    name: 'predictLocationFlow',
    inputSchema: PredictLocationInputSchema,
    outputSchema: PredictLocationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
