// This is an autogenerated file from Firebase Studio.
/**
 * @fileOverview This file contains the Zod schemas and TypeScript types for the AI flows.
 * By separating these from the flow definitions, we can avoid Next.js "use server"
 * directive conflicts with non-serializable exports.
 */

import { z } from 'zod';

// Schemas for generate-reminders flow
const ProfileSchema = z.object({
  id: z.string(),
  name: z.string(),
  role: z.string(),
  avatar: z.string(),
  routine: z.string(),
  essentials: z.array(z.string()),
});

const ItemSchema = z.object({
  id: z.string(),
  name: z.string(),
  owner: z.string(),
  location: z.string(),
  status: z.enum(['In Place', 'Misplaced']),
  hasTag: z.boolean(),
});

export const GenerateRemindersInputSchema = z.object({
  profiles: z.array(ProfileSchema).describe('An array of user profiles.'),
  items: z.array(ItemSchema).describe('An array of all tracked items.'),
  currentTime: z.string().describe('The current time in ISO format.'),
});
export type GenerateRemindersInput = z.infer<typeof GenerateRemindersInputSchema>;

export const ReminderSchema = z.object({
    profileName: z.string().describe("The name of the profile the reminder is for."),
    title: z.string().describe("A short, catchy title for the reminder."),
    suggestion: z.string().describe("The detailed reminder or suggestion."),
});
export type Reminder = z.infer<typeof ReminderSchema>;

export const GenerateRemindersOutputSchema = z.object({
  reminders: z.array(ReminderSchema),
});
export type GenerateRemindersOutput = z.infer<
  typeof GenerateRemindersOutputSchema
>;


// Schemas for predict-location flow
export const PredictLocationInputSchema = z.object({
  itemCharacteristics: z
    .string()
    .describe('Characteristics of the item, such as size and color.'),
  timeOfDay: z.string().describe('The current time of day.'),
  userHabits: z.string().describe('The user\'s habits related to item usage.'),
  additionalContext: z
    .string()
    .optional()
    .describe('Any additional context that might be relevant.'),
});
export type PredictLocationInput = z.infer<typeof PredictLocationInputSchema>;

export const PredictLocationOutputSchema = z.object({
  predictedLocation: z
    .string()
    .describe('The predicted location of the misplaced item.'),
  confidenceLevel: z
    .number()
    .describe('A number representing the confidence level (0-1) of the prediction.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the predicted location.'),
});
export type PredictLocationOutput = z.infer<typeof PredictLocationOutputSchema>;
